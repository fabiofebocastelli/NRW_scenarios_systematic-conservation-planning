# Scenario 1 

library(prioritizr)
library(sf)
library(terra)
library(vegan)
library(cluster)
library(raster)
library(gurobi)
library(slam)


# load planning unit data
tfc_costs <- rast("C:/Users/Fabio Castelli/OneDrive - Alma Mater Studiorum Università di Bologna/Desktop/NRW_Data/u2018_clc2018_v2020_20u1_geoPackage/total_forest_cover_25832.tif")
tfc_costs
# creating a new raster with constant costs
tfc_const_costs <- (tfc_costs*0) + 1
tfc_const_costs

# loading conservation features
existing_spa <- rast("C:/Users/Fabio Castelli/OneDrive - Alma Mater Studiorum Università di Bologna/Desktop/NRW_Data/Forest strictly protected/Forest_strictly_protected_25832.tif")
N2000 <- rast("C:/Users/Fabio Castelli/OneDrive - Alma Mater Studiorum Università di Bologna/Desktop/NRW_Data/Occurrence of FFH habitat types in North Rhine-Westphalia/Habitat_directive_FFH_25832.tif")
fht <- rast("C:/Users/Fabio Castelli/OneDrive - Alma Mater Studiorum Università di Bologna/Desktop/NRW_Data/Habitat_types_AnnexI/Dataset_from_Lanuv/forest_habitat_types_reclas_25832.tif") 
pwa <- rast("C:/Users/Fabio Castelli/OneDrive - Alma Mater Studiorum Università di Bologna/Desktop/NRW_Data/Potential wilderness areas/PWA_3000_NRW_25832.tif")
state_f <- rast("C:/Users/Fabio Castelli/OneDrive - Alma Mater Studiorum Università di Bologna/Desktop/NRW_Data/Public forest/State_forest_25832.tif")
# TFC <- rast("C:/Users/Fabio Castelli/OneDrive - Alma Mater Studiorum Università di Bologna/Desktop/NRW_Data/u2018_clc2018_v2020_20u1_geoPackage/forest_cover_NRW_25832.tif") maybe not usefull

# create a binary stack for fht raster
binary_stacked_fht <- binary_stack(fht) # for the first scenario maybe it's better to not consider the different costs related to the status of the forest for several reasons
                                        # this will be done in the third scenario
# removing layers with only 0 values 
binary_stacked_fht_cleaned <- binary_stacked_fht[[minmax(binary_stacked_fht)[2,] != 0]] # the problem now is that all the values shifted!! 
                                                                                        # I need to keep track of them because each number is a fht

# making space for such a big plot
windows(width = 10, height = 8) 
# plotting fht binary stacked just to give a look
par(mfrow = c(5, 6))
for (i in 1:27) {plot(binary_stacked_fht[[i]], main = paste("Layer", i))}


cons_feat_1 <- c(existing_spa, N2000, binary_stacked_fht, pwa, state_f) # plus TFC or not? # in "terra" you can create a stack simply with c()
cons_feat_1


# create problem
p1 <- problem(tfc_const_costs, cons_feat_1)
p1

# print number of planning units
number_of_planning_units(p1)

# Add an objective: Minimum set objective - Minimize the cost of the solution whilst ensuring that all targets are met 
p1 <- problem(tfc_const_costs, cons_feat_1) %>% add_min_shortfall_objective(budget = 52351)
p1


# Add targets

# setting different relative targets
targets <- c(0, 1.0, 1.0, 0, 0) # WARNING: check if the value 0 is correct for my purpose!!!
                                       # Otherwise, I could set the representation targets of 17% based on Aichi Biodiv. Target 11,
                                       # to provide adequate coverage of each forest habitat type 

# adding targets to the problem
p1 <- problem(tfc_costs, cons_feat_1) %>% add_min_shortfall_objective(budget = 52351) %>% add_relative_targets(targets)
p1


# Add constraints

# preparing data
not_state_f <- as.int(state_f < 0.5) # this is not working, it gives me the same raster..
# trying to get the not_state_forest layer by subtraction between total forest cover and state forest. I need to change the NA values to 0
tfc_const_costs[is.na(tfc_const_costs)] <- 0 # reclassifying total forest cover layer
state_f[is.na(state_f)] <- 0 # reclassifying state layer
not_state_f <- tfc_const_costs - state_f


# add locked in/locked out constraints
p1 <- problem(tfc_costs, cons_feat_1) %>% 
       add_min_shortfall_objective(budget = 52351) %>% 
       add_relative_targets(targets) %>% 
       add_locked_in_constraints(pwa) %>% 
       add_locked_out_constraints(existing_spa) %>%  # locking it out to be sure that the new planning units selected in the solution are outside them and enough to meet the area target
       add_locked_out_constraints(not_state_f)                                             # or better locking it in and change the target summing up the area of the existing SPA?



# no boundary/connectivity penalties for the moment...


# adding solver

p1 <- problem(tfc_costs, cons_feat_1) %>% 
  add_min_shortfall_objective(budget = 52351) %>% 
  add_relative_targets(targets) %>% 
  add_locked_in_constraints(pwa) %>% 
  add_locked_out_constraints(existing_spa) %>% 
  add_locked_out_constraints(not_state_f)  %>% 
  add_gurobi_solver(gap = 0)

# solving with Gurobi
  
